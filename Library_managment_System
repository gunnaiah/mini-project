from Library import Library
from Employee import Employee

if __name__ == '__main__':
    lib_obj = Library()
    employee_list = {}
    while True:
        print('\n\n***************** MENU *****************\n')
        print('1. Add book')
        print('2. Search book')
        print('3. Issue book')
        print('4. Return book')
        print('5. Reissue Book')
        print('6. Pay for dues')
        print('7. List available books')
        print('8. List due transactions')
        print('9. Add employee')
        print('10. Display list of employee')
        print('11. Exit')
        choice = int(input("Enter your choice: "))

        if choice == 1:
            print('******** Add a book ********')
            name = input('Enter the name of the book: ')
            author = input('Enter the name of the author: ')
            genre = input('Enter the genre: ')
            total_copies = int(input('Enter the number of copies: '))
            lib_obj.add_book(name, author, genre, total_copies)

        elif choice == 2:
            print('******** Search a book ********')
            search_ch = int(input('Press 1 to enter book ID or press 2 to enter book name: '))
            if search_ch == 1:
                book_id = int(input('Enter book ID: '))
                lib_obj.search_book_by_id(book_id)
            else:
                book_name = input('Enter book name: ')
                lib_obj.search_book_by_name(book_name)

        elif choice == 3:
            print('******** Issue book ********')
            book_id = int(input('Enter book ID: '))
            emp_id = int(input('Enter employee ID: '))
            lib_obj.issue_book(book_id, emp_id)

        elif choice == 4:
            print('******** Return a book ********')
            book_id = int(input('Enter book ID: '))
            emp_id = int(input('Enter employee ID: '))
            closure_cmts = input('Enter closure comments: ')
            lib_obj.return_book(book_id, emp_id, closure_cmts, employee_list[emp_id])

        elif choice == 5:
            print('******** Reissue a book ********')
            book_id = int(input('Enter book ID: '))
            emp_id = int(input('Enter employee ID: '))
            lib_obj.return_book(book_id, emp_id, 'Reissuing book', employee_list[emp_id])
            lib_obj.issue_book(book_id, emp_id)

        elif choice == 6:
            print('******** Pay pending dues ********')
            emp_id = int(input('Enter the emp id: '))
            if emp_id not in employee_list:
                print('No such employee')
            else:
                emp_obj = employee_list[emp_id]
                if emp_obj.pending_dues > 0:
                    print('Paid Rs. {}'.format(emp_obj.pending_dues))
                    emp_obj.pending_dues = 0
                else:
                    print('No pending dues for this employee')

        elif choice == 7:
            print('******** List all books ********')
            lib_obj.list_books()

        elif choice == 8:
            print('******** List all due transactions ********')
            lib_obj.list_due_transactions()

        elif choice == 9:
            print('******** Add new employee ********')
            name = input('Enter the name of the employee: ')
            dept = input('Enter the department: ')
            email = input('Enter the email: ')
            employee_list[len(employee_list)] = Employee(len(employee_list), name, dept, email)

        elif choice == 10:
            print('******** List all employees ********')
            for employee_id in employee_list:
                employee = employee_list[employee_id]
                print('ID: {}\nName: {}\nDepartment: {}\nEmail: {}\nPending dues: {}'.format(
                    employee.ID,
                    employee.name,
                    employee.dept,
                    employee.email,
                    employee.pending_dues
                ))

        elif choice == 11:
            print('*** Thanks for using. Please leave ***')
            exit(0)
from Book import Book
from datetime import date, timedelta

class Library:
    def __init__(self):
        self.books = {}
        self.books_issued = {}

    #TODO: Update issued number of copies
    def add_book(self, name, author, genre, total_copies = 1, ID = None):
        self.books[len(self.books) + 1] = [Book(len(self.books) + 1, name, author, genre, total_copies), 0]

    def issue_book(self, book_id, emp_id, issue_date = date.today()):
        self.books_issued[(book_id, emp_id)] = {
            'issue_date': issue_date,
            'expected_return_date': issue_date + timedelta(days = 15),
            'is_returned': False
        }

    def return_book(self, book_id, emp_id, closure_cmts, emp_obj):
        self.books_issued[(book_id, emp_id)]['return_date'] = date.today()
        self.books_issued[(book_id, emp_id)]['closure_comments'] = closure_cmts
        self.books_issued[(book_id, emp_id)]['is_returned'] = True
        return_date = self.books_issued[(book_id, emp_id)]['return_date']
        expected_date = self.books_issued[(book_id, emp_id)]['expected_return_date']
        if return_date > expected_date:
            dues = (return_date - expected_date).days * 10
            self.books_issued[(book_id, emp_id)]['due'] = dues
            emp_obj.pending_dues += dues
    
    def search_book_by_id(self, book_id):
        if book_id not in self.books:
            print('Book not found')
            return
        print('ID: {}\nName: {}\nAuthor: {}\nGenre: {}\nTotal copies: {}'.format(
            book_id,
            self.books[book_id][0].name,
            self.books[book_id][0].author,
            self.books[book_id][0].genre,
            self.books[book_id][0].total_copies
        ))

    def search_book_by_name(self, book_name):
        for book_id in self.books:
            book_obj = self.books[book_id][0]
            if book_name in book_obj.name:
                print('ID: {}\nName: {}\nAuthor: {}\nGenre: {}\nTotal copies: {}'.format(
                    book_obj.ID,
                    book_obj.name,
                    book_obj.author,
                    book_obj.genre,
                    book_obj.total_copies
                ))
                return
        print('Book not found')

    def list_books(self):
        for book_id in self.books:
            book_obj = self.books[book_id][0]
            print('ID: {}\nName: {}\nAuthor: {}\nGenre: {}\nTotal copies: {}'.format(
                    book_obj.ID,
                    book_obj.name,
                    book_obj.author,
                    book_obj.genre,
                    book_obj.total_copies
                ))

    def list_due_transactions(self):
        for book_employee in self.books_issued:
            if not self.books_issued[book_employee]['is_returned']:
                print('Book ID: {}\nEmployee ID: {}\nIssue date: {}\nExpected return date: {}'.format(
                    book_employee[0], book_employee[1],
                    self.books_issued[book_employee]['issue_date'],
                    self.books_issued[book_employee]['expected_return_date']))
class Book:
    def __init__(self, ID, name, author, genre, total_copies = 1):
        self.ID = ID
        self.name = name
        self.author = author
        self.genre = genre
        self.total_copies = total_copies
class Employee:
    def __init__(self, ID, name, dept, email, pending_dues = 0):
        self.ID = ID
        self.name = name
        self.dept = dept
        self.email = email
        self.pending_dues = pending_dues
